const std = @import("std");
const math = @import("std").math;

pub const DiffieHellman = @This();

pub const PRIME: u128 = 222392262344345353256328972204318075856110285442924716049296904533452106946136176728916254313569733417182247634485469630244342118398120913107889451993217333124665495279038642809609440472717753356078042059768261595463527098614283663581674742758275854002716523746484682627801613191692017759052035554567307391405205027541292591909987472904423474280626848374334265742143597416489960905398562603615563446499125083109898234505861286324225953576359511249257751627011895598729381519081590582126284226278915582678927919393791311103097195366352533407344348159603756373569395795367364776359186128652390296839619795889723426571563723190384734195498453173406558793629509853344978959591263881047129414109597344463127924087295024855108762017587286815879444487958981241385650093967113517218672092737773312835067605105107294832278108396573303572181176755797156830970443875781047178271891972403369961303663785785526225545755987703269303871667551259287022360402703003064471066064937930106744737920735010169569872385695759568206105687964993379915065283118841277653801122753981451629804296392711153118730835526046746136184235053520839700150304132862273872764942644945424314039169701185538319032043825186917005353102010049612581793104838519642885440838938443052197041906181102289426914535352536859405785922901934572212745831646325612618057296209227776901321869866633620746664674769628586059465001967751039583464841732448782548957298750516264887087507837434774658131758393409766801635183780259083665335574026101997848879875860843579920792830612136662371732056254206974617014192296766482436189002609756461358957790384713835983609647133677880299211515536042108902689049979462555234546733888259073248392963511835527879717739285310045056593661553881580465034320802783846881786864649270315469949056770425289829627245831605335999374711886287790582885141613167086781297687270329446209897007074606359527013723224088190157144180972252248503157866867391997707942044606484643563973532431472234908756865030877959786634123312543769313;

pub const generator: u128 = 2;

fn mod_exp(base: u128, exp: u128, modulus: u128) u128 {
    var result: u128 = 1;
    var b: u128 = base;
    var e: u128 = exp;

    while (e > 0) {
        if (e & 1 == 1) {
            result = (result * b) % modulus;
        }
        b = (b * b) % modulus;
        e = e / 2;
    }

    return result;
}

pub fn main() void {
    const stdout = std.io.getStdOut().writer();
    
    // Party A's private key
    const private_a: u128 = 1234567890123456789012345678901234567890;

    // Party B's private key
    const private_b: u128 = 9876543210987654321098765432109876543210;

    // Calculate public keys
    const public_a = mod_exp(generator, private_a, PRIME);
    const public_b = mod_exp(generator, private_b, PRIME);

    // Calculate shared secret
    const secret_a = mod_exp(public_b, private_a, PRIME);
    const secret_b = mod_exp(public_a, private_b, PRIME);

    // The shared secrets from both parties should match
    try stdout.print("Public A: {}\n", .{public_a});
    try stdout.print("Public B: {}\n", .{public_b});
    try stdout.print("Secret A: {}\n", .{secret_a});
    try stdout.print("Secret B: {}\n", .{secret_b});

    if (secret_a == secret_b) {
        try stdout.print("The shared secrets match!\n", .{});
    } else {
        try stdout.print("The shared secrets do not match.\n", .{});
    }
}